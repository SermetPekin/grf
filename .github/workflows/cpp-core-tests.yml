name: C++ Core Tests - Non-Characterization

on:
  push:
    branches: [ master, main ]
    paths:
      - 'core/**'
      - '.github/workflows/cpp-core-tests.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'core/**'
      - '.github/workflows/cpp-core-tests.yml'
  workflow_dispatch:

jobs:
  core-tests:
    name: Core Tests (Non-Characterization) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            compiler: g++
            build_type: makefile
          - os: windows-latest
            compiler: cl
            build_type: cmake
          - os: macos-latest
            compiler: clang++
            build_type: makefile

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq build-essential cmake

    - name: Set up build environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.1

    - name: Set up build environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --install 2>/dev/null || true

    - name: Build with Makefile (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "Building with Makefile..."
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 2) test
        ls -la build/

    - name: Build with CMake (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "Building with CMake..."
        mkdir build-cmake
        cd build-cmake
        cmake -DCMAKE_CXX_COMPILER=cl.exe ..
        cmake --build . --config Release
        dir

    - name: Run Unit Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Unit Tests (Non-Characterization) ==="
        ./build/grf_test '~[characterization]' --reporter compact

    - name: Run Unit Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Unit Tests (Non-Characterization) ==="
        .\build-cmake\Release\grf.exe "~[characterization]" --reporter compact

    - name: Run Forest Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Forest Tests (Excluding Characterization) ==="
        ./build/grf_test '[forest]' '~[characterization]' --reporter compact

    - name: Run Forest Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Forest Tests (Excluding Characterization) ==="
        .\build-cmake\Release\grf.exe "[forest]" "~[characterization]" --reporter compact

    - name: Run Prediction Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Prediction Strategy Tests ==="
        ./build/grf_test '[prediction]' --reporter compact

    - name: Run Prediction Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Prediction Strategy Tests ==="
        .\build-cmake\Release\grf.exe "[prediction]" --reporter compact

    - name: Run Splitting Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Splitting Rule Tests ==="
        ./build/grf_test '[splitting]' --reporter compact

    - name: Run Splitting Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Splitting Rule Tests ==="
        .\build-cmake\Release\grf.exe "[splitting]" --reporter compact

    - name: Run Relabeling Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Relabeling Strategy Tests ==="
        ./build/grf_test '[relabeling]' --reporter compact

    - name: Run Relabeling Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Relabeling Strategy Tests ==="
        .\build-cmake\Release\grf.exe "[relabeling]" --reporter compact

    - name: Run Sampling Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Sampling Tests ==="
        ./build/grf_test '[sampling]' --reporter compact

    - name: Run Sampling Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Sampling Tests ==="
        .\build-cmake\Release\grf.exe "[sampling]" --reporter compact

    - name: Run Tree Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Tree Tests ==="
        ./build/grf_test '[tree]' --reporter compact

    - name: Run Tree Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Tree Tests ==="
        .\build-cmake\Release\grf.exe "[tree]" --reporter compact

    - name: Run Analysis Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Analysis Tests ==="
        ./build/grf_test '[analysis]' --reporter compact

    - name: Run Analysis Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Analysis Tests ==="
        .\build-cmake\Release\grf.exe "[analysis]" --reporter compact

    - name: Run Commons/Utility Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Commons/Utility Tests ==="
        ./build/grf_test '[commons]' --reporter compact

    - name: Run Commons/Utility Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Commons/Utility Tests ==="
        .\build-cmake\Release\grf.exe "[commons]" --reporter compact

    - name: Run Smoke Tests (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Running Smoke Tests ==="
        ./build/grf_test '[smoke]' --reporter compact

    - name: Run Smoke Tests (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Running Smoke Tests ==="
        .\build-cmake\Release\grf.exe "[smoke]" --reporter compact

    - name: List Available Test Tags (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Available Test Tags ==="
        ./build/grf_test --list-tags

    - name: List Available Test Tags (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Available Test Tags ==="
        .\build-cmake\Release\grf.exe --list-tags

    - name: Performance Test - Basic Forest Operations (Unix)
      if: matrix.build_type == 'makefile'
      working-directory: core
      run: |
        echo "=== Performance Test - Basic Forest Operations ==="
        time ./build/grf_test 'causal forests are invariant to rescaling of the sample weights' --reporter compact
        time ./build/grf_test 'regression forests give reasonable variance estimates' --reporter compact
        time ./build/grf_test 'causal survival forests give positive variance estimates' --reporter compact

    - name: Performance Test - Basic Forest Operations (Windows)
      if: matrix.build_type == 'cmake'
      working-directory: core
      run: |
        echo "=== Performance Test - Basic Forest Operations ==="
        Measure-Command { .\build-cmake\Release\grf.exe "causal forests are invariant to rescaling of the sample weights" --reporter compact }
        Measure-Command { .\build-cmake\Release\grf.exe "regression forests give reasonable variance estimates" --reporter compact }
        Measure-Command { .\build-cmake\Release\grf.exe "causal survival forests give positive variance estimates" --reporter compact }

    - name: Test Summary
      run: |
        echo "=== Test Summary for ${{ matrix.os }} ==="
        echo "Build Type: ${{ matrix.build_type }}"
        echo "Compiler: ${{ matrix.compiler }}"
        echo "OS: ${{ matrix.os }}"
        echo ""
        echo "This workflow tests all non-characterization tests to verify:"
        echo "1. Core algorithms work correctly"
        echo "2. Test environment is properly configured"
        echo "3. Only characterization tests (prediction baselines) are problematic"
        echo "4. The issue is with outdated expected prediction files, not the algorithms"

    - name: Environment Info
      run: |
        echo "=== Environment Information ==="
        echo "OS: ${{ matrix.os }}"
        echo "Runner: ${{ runner.os }}"
        if [ "$RUNNER_OS" = "Linux" ]; then
          echo "Compiler: $(g++ --version | head -1)"
          echo "CPU: $(nproc) cores"
          echo "Memory: $(free -h | grep Mem)"
          echo "Kernel: $(uname -r)"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          echo "Compiler: $(clang++ --version | head -1)"
          echo "CPU: $(sysctl -n hw.ncpu) cores"
          echo "Memory: $(sysctl hw.memsize | awk '{print $2/1024/1024/1024 " GB"}')"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Architecture: $(uname -m)"
        elif [ "$RUNNER_OS" = "Windows" ]; then
          echo "Compiler: MSVC"
          echo "CPU cores: $env:NUMBER_OF_PROCESSORS"
          systeminfo | findstr "Total Physical Memory"
          echo "Windows Version: $(Get-WmiObject -Class Win32_OperatingSystem).Caption"
        fi